/*
*  Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
*
*  WSO2 LLC. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/

package org.wso2.carbon.${connectorName}connector;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Metadata;
import org.apache.synapse.MessageContext;
import org.apache.synapse.util.InlineExpressionUtil;
import org.json.JSONArray;
import org.wso2.carbon.connector.core.AbstractConnector;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class is responsible for creating a gRPC channel with metadata.
 */
public class GRPCChannelBuilder extends AbstractConnector {
    private static final Logger LOGGER = Logger.getLogger(GRPCChannelBuilder.class.getName());

    private static String server;
    private static String port;
    private static String headers;
    private static String username;
    private static String password;
    private static String serverCrt;
    private static String bearerToken;
    private static final String GRPC_CHANNEL = "grpc_channel";

    public static String getServer() {
        return server;
    }

    public static void setServer(String server) {
        GRPCChannelBuilder.server = server;
    }

    public static String getPort() {
        return port;
    }

    public static void setPort(String port) {
        GRPCChannelBuilder.port = port;
    }


    public static void setHeaders(String headersJson) {
        GRPCChannelBuilder.headers = headersJson;
    }

    public static String getGRPCHeaders() {
        return headers;
    }

    public static String getUsername() {
        return username;
    }

    public static void setUsername(String username) {
        GRPCChannelBuilder.username = username;
    }

    public static String getPassword() {
        return password;
    }

    public static void setPassword(String password) {
        GRPCChannelBuilder.password = password;
    }

    public static String getServerCrt() {
        return serverCrt;
    }

    public static void setServerCrt(String serverCrt) {
        GRPCChannelBuilder.serverCrt = serverCrt;
    }

    public static String getBearerToken() {
        return bearerToken;
    }

    public static void setBearerToken(String bearerToken) {
        GRPCChannelBuilder.bearerToken = bearerToken;
    }

    @Override
    public void connect(MessageContext messageContext) {
        if (messageContext.getProperty(GRPC_CHANNEL) != null) {
            return;
        }
        try {
            if (getServer() == null || getPort() == null) {
                throw new IllegalArgumentException("Server or port cannot be null");
            }
            if (getUsername() != null && getPassword() != null) {
                BasicCallCredentials basicAuthCredential = new BasicCallCredentials(getUsername(), getPassword());
                messageContext.setProperty("basicCredential", basicAuthCredential);
            } else if (getBearerToken() != null) {
                TokenCallCredentials tokenCredential = new TokenCallCredentials(getBearerToken());
                messageContext.setProperty("tokenCredential", tokenCredential);
            }

            int portInt = Integer.parseInt(getPort());
            String target = getServer() + ":" + portInt;

            if (getGRPCHeaders() == null) {
                // Create channel without metadata
                if(getServerCrt() != null) {
                    // Create secure channel with server certificate
                    ManagedChannel channel = createSecureChannelWithoutMetaData(target);
                    messageContext.setProperty(GRPC_CHANNEL, channel);
                    LOGGER.info("gRPC channel created successfully without metadata: " + target);
                    return;
                }
                ManagedChannel channel = createPlaintextChannelWithoutMetadata(target);
                messageContext.setProperty(GRPC_CHANNEL, channel);
                LOGGER.info("gRPC channel created successfully without metadata: " + target);
                return;
            }
            // Extract metadata from JSON
            Metadata metadata = new Metadata();
            JSONArray headerSet = null;

            try {
                //headerSet = mapper.readTree(getGRPCHeaders());
                headers = InlineExpressionUtil.processInLineSynapseExpressionTemplate(messageContext, headers);
                headerSet = new JSONArray(headers);
            } catch (Exception e) {
                LOGGER.log(Level.SEVERE, "Error parsing JSON headers: " + e.getMessage(), e);
            }
            if (headerSet != null) {
                for (int i = 0; i < headerSet.length(); i++) {
                    JSONArray row = headerSet.getJSONArray(i);

                    if (row.length() >= 2) {
                        String key = row.getString(0);
                        String value = row.getString(1);

                        metadata.put(Metadata.Key.of(key, Metadata.ASCII_STRING_MARSHALLER), value);
                    }
                }
            }

            if (getServerCrt() != null) {
                // Create secure channel with metadata and server certificate
                ManagedChannel channel = createSecureChannel(target, metadata);
                messageContext.setProperty(GRPC_CHANNEL, channel);
                LOGGER.info("gRPC channel created successfully with metadata: " + target);
                return;
            }
            // Create channel with metadata
            ManagedChannel channel = createSecureChannel(target, metadata);

            messageContext.setProperty(GRPC_CHANNEL, channel);
            LOGGER.info("gRPC channel created successfully with metadata: " + target);

        } catch (NumberFormatException e) {
            LOGGER.log(Level.SEVERE, "Invalid port number: " + getPort(), e);
            throw new RuntimeException("Invalid port number: " + getPort(), e);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Failed to create gRPC channel: " + e.getMessage(), e);
            throw new RuntimeException("Failed to create gRPC channel", e);
        }
    }

    /**
     * Create a secure gRPC channel with metadata.
     */
    private ManagedChannel createSecureChannel(String target, Metadata metadata) {
        try {
            return ManagedChannelBuilder.forTarget(target)
                    .useTransportSecurity()
                    .intercept(new MetadataInterceptor(metadata))
                    .build();
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Failed to create secure channel, falling back to plaintext: " + e.getMessage(), e);
            return createPlaintextChannel(target, metadata);
        }
    }

    /**
     * Create a plaintext gRPC channel with metadata.
     */
    private ManagedChannel createPlaintextChannel(String target, Metadata metadata) {
        return ManagedChannelBuilder.forTarget(target)
                .usePlaintext()
                .intercept(new MetadataInterceptor(metadata))
                .build();
    }

    /**
     * Create a secure gRPC channel without metadata.
     */
    private ManagedChannel createSecureChannelWithoutMetaData(String target) {
        try {
            return ManagedChannelBuilder.forTarget(target)
                    .useTransportSecurity()
                    .build();
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Failed to create secure channel, falling back to plaintext: " + e.getMessage(), e);
            return createPlaintextChannelWithoutMetadata(target);
        }
    }

    /**
     * Create a plaintext gRPC channel without metadata.
     */
    private ManagedChannel createPlaintextChannelWithoutMetadata(String target) {
        return ManagedChannelBuilder.forTarget(target)
                .usePlaintext()
                .build();
    }
}
