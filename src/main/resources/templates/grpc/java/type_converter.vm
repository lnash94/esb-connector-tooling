package org.wso2.carbon.${connectorName}connector;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.Arrays;

/**
 * Utility class for converting String values to various Java types, including arrays and objects.
 */
public class TypeConverter {

    /**
     * Converts a String value to the specified target type.
     *
     * @param value The String value to convert
     * @param targetType The Class representing the target type
     * @param <T> The generic type parameter
     * @return The converted value, or null if conversion is not supported or fails
     */
    @SuppressWarnings("unchecked")
    public static <T> T convert(String value, Class<T> targetType) {
        if (value == null) {
            return null;
        }

        try {
            // Handle basic types
            if (String.class.equals(targetType)) {
                return (T) value;
            } else if (Long.class.equals(targetType) || long.class.equals(targetType)) {
                return (T) Long.valueOf(value);
            } else if (Integer.class.equals(targetType) || int.class.equals(targetType)) {
                return (T) Integer.valueOf(value);
            } else if (Double.class.equals(targetType) || double.class.equals(targetType)) {
                return (T) Double.valueOf(value);
            } else if (Float.class.equals(targetType) || float.class.equals(targetType)) {
                return (T) Float.valueOf(value);
            } else if (Boolean.class.equals(targetType) || boolean.class.equals(targetType)) {
                return (T) Boolean.valueOf(value);
            } else if (Short.class.equals(targetType) || short.class.equals(targetType)) {
                return (T) Short.valueOf(value);
            } else if (Byte.class.equals(targetType) || byte.class.equals(targetType)) {
                return (T) Byte.valueOf(value);
            } else if (Character.class.equals(targetType) || char.class.equals(targetType)) {
                return value.isEmpty() ? null : (T) Character.valueOf(value.charAt(0));
            } else if (BigDecimal.class.equals(targetType)) {
                return (T) new BigDecimal(value);
            } else if (BigInteger.class.equals(targetType)) {
                return (T) new BigInteger(value);
            } else if (LocalDate.class.equals(targetType)) {
                return (T) LocalDate.parse(value);
            } else if (LocalDateTime.class.equals(targetType)) {
                return (T) LocalDateTime.parse(value);
            } else if (byte[].class.equals(targetType)) {
                return (T) Base64.getDecoder().decode(value);
            }

            // Handle Object (User-Defined Class)
            if (Object.class.equals(targetType) || !targetType.isPrimitive()) {
                return (T) convertToObject(value, targetType);
            }

            // Handle Arrays
            if (targetType.isArray()) {
                return (T) convertToArray(value, targetType.getComponentType());
            }

        } catch (Exception e) {
            System.err.println("Error converting '" + value + "' to " + targetType.getName() + ": " + e.getMessage());
        }

        return null;
    }

    /**
     * Converts a comma-separated String value to an array of the specified component type.
     *
     * @param value The String value to convert (comma-separated)
     * @param componentType The Class representing the component type of the array
     * @return The converted array, or null if conversion fails
     */
    @SuppressWarnings("unchecked")
    private static Object convertToArray(String value, Class<?> componentType) {
        String[] parts = value.split("\\s*,\\s*"); // Split by commas, trim spaces

        if (componentType.equals(int.class)) {
            return Arrays.stream(parts).mapToInt(Integer::parseInt).toArray();
        } else if (componentType.equals(long.class)) {
            return Arrays.stream(parts).mapToLong(Long::parseLong).toArray();
        } else if (componentType.equals(double.class)) {
            return Arrays.stream(parts).mapToDouble(Double::parseDouble).toArray();
        } else if (componentType.equals(float.class)) {
            return Arrays.stream(parts).map(Float::parseFloat).toArray();
        } else if (componentType.equals(boolean.class)) {
            return Arrays.stream(parts).map(Boolean::parseBoolean).toArray();
        } else if (componentType.equals(short.class)) {
            return Arrays.stream(parts).map(Short::parseShort).toArray();
        } else if (componentType.equals(byte.class)) {
            return Arrays.stream(parts).map(Byte::parseByte).toArray();
        } else if (componentType.equals(String.class)) {
            return parts;
        } else if (componentType.equals(BigDecimal.class)) {
            return Arrays.stream(parts).map(BigDecimal::new).toArray(BigDecimal[]::new);
        } else if (componentType.equals(BigInteger.class)) {
            return Arrays.stream(parts).map(BigInteger::new).toArray(BigInteger[]::new);
        } else if (componentType.equals(LocalDate.class)) {
            return Arrays.stream(parts).map(LocalDate::parse).toArray(LocalDate[]::new);
        } else if (componentType.equals(LocalDateTime.class)) {
            return Arrays.stream(parts).map(LocalDateTime::parse).toArray(LocalDateTime[]::new);
        }

        // Handle Object[] for user-defined classes
        return Arrays.stream(parts).map(part -> convertToObject(part, componentType)).toArray(size -> (Object[]) Array.newInstance(componentType, size));
    }

    /**
     * Converts a String value to an instance of a user-defined class.
     *
     * @param value The String value to convert
     * @param targetType The Class representing the target type
     * @return The converted object, or null if conversion fails
     */
    private static Object convertToObject(String value, Class<?> targetType) {
        try {
            // Check if the class has a constructor that takes a String argument
            Constructor<?> constructor = targetType.getDeclaredConstructor(String.class);
            return constructor.newInstance(value);
        } catch (Exception e) {
            System.err.println("Error converting '" + value + "' to " + targetType.getName() + ": " + e.getMessage());
        }
        return null;
    }
}
